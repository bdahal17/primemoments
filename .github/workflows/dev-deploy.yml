name: dev-deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-east-2
      ECR_REPOSITORY: primemoments-app-ecr
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build (Gradle)
        run: ./gradlew clean :backend:bootJar

      - name: Configure AWS Credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ACCESS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (with backend config)
        working-directory: terraform
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: terraform init

      - name: Terraform Validate & Plan
        working-directory: terraform
        run: |
          terraform validate
          terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'    # only auto-apply on main; adjust as you like
        working-directory: terraform
        run: |
          terraform apply -auto-approve tfplan

#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build, tag, and push Docker image to ECR
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: ${{ env.ECR_REPOSITORY }}
#          IMAGE_TAG: ${{ env.IMAGE_TAG }}
#        run: |
#          # Copy the JAR to backend/build/libs (if not already there)
#          ls -al backend/build/libs
#          cp backend/build/libs/*.jar backend/app.jar
#
#          # Build Docker image
#          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f backend/Dockerfile backend
#
#          # Push image to ECR
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
